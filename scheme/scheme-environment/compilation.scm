;;; compilation.scm -- compilation support

(define (ensure-module-loaded! name)
  (error "ensure-module-loaded! not implemented"))

(define (compile-file fasl-port module filename)
  (let* ((stdout (current-output-port)))
    (with-cwd* (file-name-directory filename)
      (lambda ()
	(with-input-from-file filename
	  (lambda ()
	    (let loop ((exp (read)))
;	  (display "compiling:" stdout)
;	  (display exp stdout)
	      (if (eof-object? exp)
		  'done-compiling
		  (condition-case
		   (let* ((syntax-env (module/syntax module))
			  (expanded-exp (syntax-expand exp
						       (make-syntax-env syntax-env))))
		     (if (define-syntax? expanded-exp)
			 (let* ((expander (define-syntax/expr expanded-exp))
				(compiled (compile expander '() ""
						   return-continuation))
				(assembled (assembler compiled module)))
                                        ;                      (display expander stdout)
                                        ;                      (display compiled stdout)
			   (write-type type/syntax fasl-port)
			   (write-fasl! (define-syntax/name expanded-exp) fasl-port)
			   (write-fasl! assembled fasl-port)
			   (let ((proc (make-procedure 2)))
			     (procedure-set! proc 0 'undefined)
			     (procedure-set! proc 1 assembled)
			     (bind-syntax! (define-syntax/name expanded-exp)
					   (make-syntax (proc)
							(module/syntax module))
					   module)))
			 (let* ((compiled-exp (compile expanded-exp '() ""
						       return-continuation))
				(assembled-exp (assembler compiled-exp module))
				(proc (make-procedure 2)))
			   (write-type type/expr fasl-port)
			   (write-fasl! assembled-exp fasl-port)
			   (procedure-set! proc 0 'undefined)
			   (procedure-set! proc 1 assembled-exp)
			   (proc)))
					;                 (newline stdout)
		     (loop (read)))
		   (<condition>
		    (lambda (condition)
		      (display "Error: ") (write condition) (newline))))))))))))

(define (compile-file* fasl-port module filenames)
  (for-each (lambda (filename) (compile-file fasl-port module filename))
            filenames))

(define (compile-library filename)
  (if (file-exists? filename)
      (if (file-readable? filename)
          (let ((module-def (with-input-from-file filename
                              (lambda () (read)))))
            (if (and (pair? module-def)
                     (eq? 'define-structure (car module-def)))
                (let* ((name (cadr module-def))
                       (module (make-module name '() '() "" '() name))
		       (module-fasl-filename (string-append
					      (file-name-directory filename)
					      (symbol->string name)
					      ".fasl")))
		  (call-with-output-file module-fasl-filename
		    (lambda (module-fasl-port)
		      (with-cwd* (file-name-directory filename)
                        (lambda ()
			  (bind-module! name module)
			  (let loop ((def (cddr module-def)))
			    (if (pair? def)
				(let ((directive (car def)))
				  (cond ((and (pair? directive)
					      (eq? (car directive) 'export))
					 (set-module/export! module (cdr directive)))
					((and (pair? directive)
					      (eq? (car directive) 'open))
					 (let ((modules (cdr directive)))
					   (for-each ensure-module-loaded! modules)
					   (set-module/open! module modules)))
					((and (pair? directive)
					      (eq? (car directive) 'doc))
					 (set-module/doc! module (cadr directive)))
					((and (pair? directive)
					      (eq? (car directive) 'files))
					 (write-type type/module module-fasl-port)
					 (write-fasl! (module/name module) module-fasl-port)
					 (write-fasl! (module/export module) module-fasl-port)
					 (write-fasl! (module/open module) module-fasl-port)
					 (write-fasl! (module/doc module) module-fasl-port)
					 (for-each ensure-module-loaded!
						   (module/open module))
					 (compile-file* module-fasl-port
							module
							(cdr directive)))
					(else (error "unknown directive" directive)))
				  (loop (cdr def)))))
			  (unbind-module! name))))))
		(error "The file ~a does not contain a module definition: ~a~%"
		       filename module-def)))
          (error "The file ~a is not readable~%" filename))
      (error "The file ~a does not exists~%" filename)))
